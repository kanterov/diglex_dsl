package diglex.dsl.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ReplaceWithAnySymbol_Intention extends BaseIntention implements Intention {
  public ReplaceWithAnySymbol_Intention() {
  }

  public String getConcept() {
    return "diglex.dsl.structure.Block";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0431\u043b\u043e\u043a \u043d\u0430 \u043b\u044e\u0431\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    ListSequence.fromList(SLinkOperations.getTargets(node, "Items", true)).clear();

    SNode anySymbol = SConceptOperations.createNewNode("diglex.dsl.structure.AnySymbol", null);
    SPropertyOperations.set(anySymbol, "timesMinimum", "" + 0);
    SPropertyOperations.set(anySymbol, "timesMaximum", "INF");
    SLinkOperations.setTarget(anySymbol, "lexemType", SLinkOperations.getTarget(node, "lexemType", false), false);

    ListSequence.fromList(SLinkOperations.getTargets(node, "Items", true)).addElement(anySymbol);
  }

  public String getLocationString() {
    return "diglex.dsl.intentions";
  }
}
