package diglex.dsl.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class AddTemplateReference_Intention extends BaseIntention implements Intention {
  public AddTemplateReference_Intention() {
  }

  public String getConcept() {
    return "diglex.dsl.structure.MatchCase";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0421\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0448\u0430\u0431\u043b\u043e\u043d";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode templateReference = SConceptOperations.createNewNode("diglex.dsl.structure.TemplateReference", null);
    SLinkOperations.setTarget(templateReference, "TemplateReference", ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(SLinkOperations.getTarget(templateReference, "TemplateReference", false)), "diglex.dsl.structure.Template")).getElement(0), false);

    ListSequence.fromList(SLinkOperations.getTargets(node, "Items", true)).addElement(templateReference);
  }

  public String getLocationString() {
    return "diglex.dsl.intentions";
  }
}
