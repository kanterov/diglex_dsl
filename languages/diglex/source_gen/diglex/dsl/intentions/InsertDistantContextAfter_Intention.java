package diglex.dsl.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class InsertDistantContextAfter_Intention extends BaseIntention implements Intention {
  public InsertDistantContextAfter_Intention() {
  }

  public String getConcept() {
    return "diglex.dsl.structure.IMatchCaseItem";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0414\u0438\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "diglex.dsl.structure.MatchCase");
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode parent = SNodeOperations.getParent(node);

    if (SNodeOperations.isInstanceOf(parent, "diglex.dsl.structure.MatchCase")) {
      SNode matchCase = SNodeOperations.as(parent, "diglex.dsl.structure.MatchCase");
      SNode distantContext = SConceptOperations.createNewNode("diglex.dsl.structure.DistantContext", null);

      int index = ListSequence.fromList(SLinkOperations.getTargets(matchCase, "Items", true)).indexOf(node);
      ListSequence.fromList(SLinkOperations.getTargets(matchCase, "Items", true)).insertElement(index + 1, distantContext);
    }
  }

  public String getLocationString() {
    return "diglex.dsl.intentions";
  }
}
