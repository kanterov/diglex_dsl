package diglex.dsl.utils;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import diglex.bridge.xml.model.Dictionary;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.List;
import diglex.bridge.xml.model.Class;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import diglex.bridge.xml.model.Template;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import diglex.bridge.xml.model.ClassProperty;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import diglex.bridge.xml.model.MatchCase;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import diglex.bridge.xml.model.MatchCaseItem;
import diglex.bridge.xml.model.MatchCaseCondition;
import diglex.bridge.xml.model.AnonymousTemplateItem;
import diglex.bridge.xml.model.TemplateReference;
import diglex.bridge.xml.model.DistantContext;
import diglex.bridge.xml.model.DistantContextCondition;
import diglex.bridge.xml.model.Block;
import diglex.bridge.xml.model.BlockItem;
import diglex.bridge.xml.model.AnySymbol;
import diglex.bridge.xml.model.Tail;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.Sequence;
import diglex.bridge.xml.model.Repeat;
import diglex.bridge.xml.model.MatchMode;

public class XmlImportUtil {
  private static SModel model;
  private static IScope scope;
  private static Map<Integer, SNode> idToTemplateClass;
  private static Map<SNode, Integer> templateClassToParentId;
  private static Map<Integer, SNode> idToTemplate;

  public XmlImportUtil() {
  }

  public static void ImportDictionary(Dictionary dictionary, SModel _model, IScope _scope) {


    final SNode myDictionary = SConceptOperations.createNewNode("diglex.dsl.structure.Dictionary", null);
    List<Class> classes = ListSequence.fromListWithValues(new LinkedList<Class>(), dictionary.getClasses());
    List<Template> templates = ListSequence.fromListWithValues(new LinkedList<Template>(), dictionary.getTemplates());

    idToTemplate = MapSequence.fromMap(new HashMap<Integer, SNode>());
    templateClassToParentId = MapSequence.fromMap(new HashMap<SNode, Integer>());
    idToTemplateClass = MapSequence.fromMap(new HashMap<Integer, SNode>());

    SPropertyOperations.set(myDictionary, "name", "\u0421\u043b\u043e\u0432\u0430\u0440\u044c");

    model = _model;
    scope = _scope;

    // Create all classes without connection to parents 
    ListSequence.fromList(classes).visitAll(new IVisitor<Class>() {
      public void visit(Class clazz) {
        SNode myClazz = SConceptOperations.createNewNode("diglex.dsl.structure.TemplateClass", null);
        SNode dictionaryClass = SConceptOperations.createNewNode("diglex.dsl.structure.DictionaryClass", null);

        List<ClassProperty> classProperties = ListSequence.fromListWithValues(new LinkedList<ClassProperty>(), clazz.getProperties());

        if (clazz.getId() == 0) {
          SPropertyOperations.set(myClazz, "base", "" + true);
        }

        SPropertyOperations.set(myClazz, "name", clazz.getName());
        ListSequence.fromList(classProperties).visitAll(new IVisitor<ClassProperty>() {
          public void visit(ClassProperty classProperty) {
            createTemplateClassProperty(classProperty);
          }
        });

        SLinkOperations.setTarget(dictionaryClass, "templateClass", myClazz, false);
        ListSequence.fromList(SLinkOperations.getTargets(myDictionary, "dictionaryClass", true)).addElement(dictionaryClass);

        MapSequence.fromMap(idToTemplateClass).put(clazz.getId(), myClazz);
        if (clazz.getParentIds().size() > 0) {
          MapSequence.fromMap(templateClassToParentId).put(myClazz, clazz.getParentIds().get(0));
        }

        SModelOperations.addRootNode(model, myClazz);
      }
    });

    // Make connections to parents 
    ListSequence.fromList(SLinkOperations.getTargets(myDictionary, "dictionaryClass", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "templateClass", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "templateClass", false);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode templateClass) {
        if (MapSequence.fromMap(templateClassToParentId).containsKey(templateClass)) {
          int parentId = MapSequence.fromMap(templateClassToParentId).get(templateClass);
          SLinkOperations.setTarget(templateClass, "parentClass", MapSequence.fromMap(idToTemplateClass).get(parentId), false);
        }
      }
    });

    ListSequence.fromList(templates).visitAll(new IVisitor<Template>() {
      public void visit(Template template) {
        SNode myTemplate = SConceptOperations.createNewNode("diglex.dsl.structure.Template", null);

        MapSequence.fromMap(idToTemplate).put(template.getId(), myTemplate);
      }
    });

    ListSequence.fromList(templates).visitAll(new IVisitor<Template>() {
      public void visit(Template template) {
        final SNode myTemplate = MapSequence.fromMap(idToTemplate).get(template.getId());
        SNode dictionaryTemplate = SConceptOperations.createNewNode("diglex.dsl.structure.DictionaryTemplate", null);
        List<MatchCase> matchCases = ListSequence.fromListWithValues(new LinkedList<MatchCase>(), template.getMatchCases());

        SPropertyOperations.set(myTemplate, "MatchMode", SEnumOperations.getEnumMemberValue(getMatchMode(template.getMatchMode())));
        SPropertyOperations.set(myTemplate, "name", template.getName());

        if (template.getClassIds().size() >= 1) {
          int classId = template.getClassIds().get(0);
          if (MapSequence.fromMap(idToTemplateClass).containsKey(classId)) {
            SLinkOperations.setTarget(myTemplate, "templateClass", MapSequence.fromMap(idToTemplateClass).get(classId), false);
          } else {
            // TODO: error 
          }
        }

        ListSequence.fromList(SLinkOperations.getTargets(myTemplate, "MatchCases", true)).clear();

        ListSequence.fromList(matchCases).visitAll(new IVisitor<MatchCase>() {
          public void visit(MatchCase matchCase) {
            SNode myMatchCase = getMatchCase(matchCase);
            ListSequence.fromList(SLinkOperations.getTargets(myTemplate, "MatchCases", true)).addElement(myMatchCase);
          }
        });

        MapSequence.fromMap(idToTemplate).put(template.getId(), myTemplate);
        SLinkOperations.setTarget(dictionaryTemplate, "template", myTemplate, false);
        ListSequence.fromList(SLinkOperations.getTargets(myDictionary, "dictionaryTemplate", true)).addElement(dictionaryTemplate);

        SModelOperations.addRootNode(model, myTemplate);
      }
    });

    SModelOperations.addRootNode(model, myDictionary);

    MapSequence.fromMap(idToTemplate).clear();
    MapSequence.fromMap(templateClassToParentId).clear();
    MapSequence.fromMap(idToTemplateClass).clear();
  }

  public static SNode getMatchCase(MatchCase matchCase) {
    SNode myMatchCase = SConceptOperations.createNewNode("diglex.dsl.structure.MatchCase", null);

    ListSequence.fromList(SLinkOperations.getTargets(myMatchCase, "Items", true)).clear();
    for (MatchCaseItem matchCaseItem : ListSequence.fromList(matchCase.getItems())) {
      SNode myMatchCaseItem = getMatchCaseItem(matchCaseItem);
      ListSequence.fromList(SLinkOperations.getTargets(myMatchCase, "Items", true)).addElement(myMatchCaseItem);

      if (matchCase.getPrecondition() != null) {
        SLinkOperations.setTarget(myMatchCase, "Precondition", getMatchCaseCondition(matchCase.getPrecondition()), true);
      }
      if (matchCase.getPostcondition() != null) {
        SLinkOperations.setTarget(myMatchCase, "Postcondition", getMatchCaseCondition(matchCase.getPostcondition()), true);
      }
    }

    return myMatchCase;
  }

  public static SNode getMatchCaseCondition(MatchCaseCondition matchCaseCondition) {
    final SNode myMatchCaseCondition = SConceptOperations.createNewNode("diglex.dsl.structure.MatchCaseCondition", null);
    List<MatchCaseItem> matchCaseItems = ListSequence.fromListWithValues(new LinkedList<MatchCaseItem>(), matchCaseCondition.getItems());

    SPropertyOperations.set(myMatchCaseCondition, "NotInclude", "" + matchCaseCondition.getNotInclude());

    ListSequence.fromList(matchCaseItems).visitAll(new IVisitor<MatchCaseItem>() {
      public void visit(MatchCaseItem matchCaseItem) {

        SNode myMatchCaseItem = getMatchCaseItem(matchCaseItem);
        ListSequence.fromList(SLinkOperations.getTargets(myMatchCaseCondition, "Items", true)).addElement(myMatchCaseItem);
      }
    });

    return myMatchCaseCondition;
  }

  private static SNode getMatchCaseItem(MatchCaseItem matchCaseItem) {
    SNode myMatchCaseItem = null;

    if (matchCaseItem.getType().equals("Block")) {
      return getBlock(matchCaseItem.getBlock());
    }
    if (matchCaseItem.getType().equals("TemplateReference")) {
      return getTemplateReference(matchCaseItem.getTemplateReference());
    }
    if (matchCaseItem.getType().equals("DistantContext")) {
      return getDistantContext(matchCaseItem.getDistantContext());
    }
    if (matchCaseItem.getType().equals("AnonymousTemplate")) {
      return getAnonymousTemplate(matchCaseItem.getAnonymousTemplateItem());
    }

    return myMatchCaseItem;
  }

  private static SNode getAnonymousTemplate(AnonymousTemplateItem anonymousTemplateItem) {
    final SNode myAnonymousTemplate = SConceptOperations.createNewNode("diglex.dsl.structure.AnonymousTemplate", null);
    List<MatchCase> matchCases = ListSequence.fromListWithValues(new LinkedList<MatchCase>(), anonymousTemplateItem.getAnonymousTemplate().getMatchCases());

    SLinkOperations.setTarget(myAnonymousTemplate, "Repeat", getRepeat(anonymousTemplateItem.getRepeat()), true);
    ListSequence.fromList(matchCases).visitAll(new IVisitor<MatchCase>() {
      public void visit(MatchCase matchCase) {
        SNode myMatchCase = getMatchCase(matchCase);
        ListSequence.fromList(SLinkOperations.getTargets(myAnonymousTemplate, "matchCase", true)).addElement(myMatchCase);
      }
    });

    return myAnonymousTemplate;
  }

  private static SNode getTemplateReference(TemplateReference templateReference) {
    SNode myTemplateReference = SConceptOperations.createNewNode("diglex.dsl.structure.TemplateReference", null);
    int id = templateReference.getReferencesId();
    SNode template = MapSequence.fromMap(idToTemplate).get(id);

    SLinkOperations.setTarget(myTemplateReference, "Repeat", getRepeat(templateReference.getRepeat()), true);
    SLinkOperations.setTarget(myTemplateReference, "TemplateReference", template, false);

    return myTemplateReference;
  }

  private static SNode getDistantContext(DistantContext distantContext) {
    final SNode myDistantContext = SConceptOperations.createNewNode("diglex.dsl.structure.DistantContext", null);
    List<DistantContextCondition> conditions = ListSequence.fromListWithValues(new LinkedList<DistantContextCondition>(), distantContext.getConditions());

    SLinkOperations.setTarget(myDistantContext, "Repeat", getRepeat(distantContext.getRepeat()), true);
    ListSequence.fromList(conditions).visitAll(new IVisitor<DistantContextCondition>() {
      public void visit(DistantContextCondition condition) {

        SNode myCondition = getDistantContextCondition(condition);
        ListSequence.fromList(SLinkOperations.getTargets(myDistantContext, "Conditions", true)).addElement(myCondition);
      }
    });

    return myDistantContext;
  }

  private static SNode getDistantContextCondition(DistantContextCondition condition) {
    SNode myDistantContextCondition = SConceptOperations.createNewNode("diglex.dsl.structure.DistantContextCondition", null);
    int id = condition.getNodeId();

    SPropertyOperations.set(myDistantContextCondition, "NotInclude", "" + condition.isNotInclude());
    SLinkOperations.setTarget(myDistantContextCondition, "TemplateReference", MapSequence.fromMap(idToTemplate).get(id), false);

    return myDistantContextCondition;
  }

  private static SNode getBlock(Block block) {
    final SNode myBlock = SConceptOperations.createNewNode("diglex.dsl.structure.Block", null);
    List<BlockItem> blockItems = ListSequence.fromListWithValues(new LinkedList<BlockItem>(), block.getBlockItems());

    SLinkOperations.setTarget(myBlock, "lexemType", getLexemType(block.getLexemType()), false);
    SLinkOperations.setTarget(myBlock, "Repeat", getRepeat(block.getRepeat()), true);
    if (block.getTail() != null) {
      SLinkOperations.setTarget(myBlock, "Tail", getTail(block.getTail()), true);
    }
    SPropertyOperations.set(myBlock, "CaseSensitive", "" + block.isCaseSensitive());

    ListSequence.fromList(SLinkOperations.getTargets(myBlock, "Items", true)).clear();
    ListSequence.fromList(blockItems).visitAll(new IVisitor<BlockItem>() {
      public void visit(BlockItem blockItem) {
        SNode myBlockItem = getBlockItem(blockItem);
        ListSequence.fromList(SLinkOperations.getTargets(myBlock, "Items", true)).addElement(myBlockItem);
      }
    });

    return myBlock;
  }

  public static SNode getBlockItem(BlockItem blockItem) {
    if (blockItem.getType().equals("AnySymbol")) {
      return getAnySymbol(blockItem);
    }
    if (blockItem.getType().equals("ExactString")) {
      return getExactString(blockItem);
    }
    if (blockItem.getType().equals("StringSet")) {
      return getStringSet(blockItem);
    }

    return null;
  }

  private static SNode getAnySymbol(BlockItem blockItem) {
    SNode anySymbol = SConceptOperations.createNewNode("diglex.dsl.structure.AnySymbol", null);

    SLinkOperations.setTarget(anySymbol, "lexemType", getLexemType(blockItem.getLexemType()), false);
    SPropertyOperations.set(anySymbol, "timesMinimum", "" + blockItem.getTimesMinimum());
    if (blockItem.getTimesMaximum().equals(AnySymbol.INF)) {
      SPropertyOperations.set(anySymbol, "timesMaximum", "INF");
    } else {
      SPropertyOperations.set(anySymbol, "timesMaximum", String.valueOf(blockItem.getTimesMaximum()));
    }

    return anySymbol;
  }

  private static SNode getExactString(BlockItem blockItem) {
    SNode exactString = SConceptOperations.createNewNode("diglex.dsl.structure.ExactString", null);

    SPropertyOperations.set(exactString, "Value", blockItem.getValue());
    SLinkOperations.setTarget(exactString, "lexemType", getLexemType(blockItem.getLexemType()), false);

    return exactString;
  }

  private static SNode getStringSet(BlockItem blockItem) {
    final SNode myStringSet = SConceptOperations.createNewNode("diglex.dsl.structure.StringSet", null);
    List<String> strings = ListSequence.fromListWithValues(new LinkedList<String>(), blockItem.getStrings());

    SLinkOperations.setTarget(myStringSet, "lexemType", getLexemType(blockItem.getLexemType()), false);

    ListSequence.fromList(strings).visitAll(new IVisitor<String>() {
      public void visit(String str) {
        SNode myStringSetItem = SConceptOperations.createNewNode("diglex.dsl.structure.StringSetItem", null);
        SPropertyOperations.set(myStringSetItem, "Value", str);
        ListSequence.fromList(SLinkOperations.getTargets(myStringSet, "Items", true)).addElement(myStringSetItem);
      }
    });

    return myStringSet;
  }

  private static SNode getTail(Tail tail) {
    SNode myTail = SConceptOperations.createNewNode("diglex.dsl.structure.BlockTail", null);

    SPropertyOperations.set(myTail, "minimumLength", "" + tail.getMinimumLength());

    if (tail.getMaximumLength().equals(Tail.INF)) {
      SPropertyOperations.set(myTail, "maximumLength", "INF");
    } else {
      SPropertyOperations.set(myTail, "maximumLength", String.valueOf(tail.getMaximumLength()));
    }

    return myTail;
  }

  private static SNode getLexemType(final String lexemType) {
    final Wrappers._T<SNode> myLexemType = new Wrappers._T<SNode>();
    Iterable<SNode> lexemTypes = LexemTypeUtil.getLexemTypes(XmlImportUtil.model, XmlImportUtil.scope);

    Sequence.fromIterable(lexemTypes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (SPropertyOperations.getString(it, "bulk").equals(lexemType)) {
          myLexemType.value = it;
        }
      }
    });

    return myLexemType.value;
  }

  private static SNode getRepeat(Repeat repeat) {
    SNode myRepeat = SConceptOperations.createNewNode("diglex.dsl.structure.RepeatTimes", null);

    SPropertyOperations.set(myRepeat, "minimum", "" + repeat.getMinimum());
    if (repeat.getMaximum().equals(Repeat.INF)) {
      SPropertyOperations.set(myRepeat, "maximum", "INF");
    } else {
      SPropertyOperations.set(myRepeat, "maximum", String.valueOf(repeat.getMaximum()));
    }

    return myRepeat;
  }

  private static SNode getMatchMode(MatchMode matchMode) {
    switch (matchMode) {
      case AbsoluteMeaningful:
        return SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "MatchMode"), "\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439");
      case RelativeMeaningful:
        return SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "MatchMode"), "\u0421\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439");
      case NotMeaningful:
        return SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "MatchMode"), "\u041d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439");
      default:
        return SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "MatchMode"), "\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439");
    }
  }

  private static SNode createTemplateClassProperty(ClassProperty classProperty) {
    SNode myClassProperty = SConceptOperations.createNewNode("diglex.dsl.structure.TemplateClassProperty", null);
    SPropertyOperations.set(myClassProperty, "name", classProperty.getName());
    SPropertyOperations.set(myClassProperty, "value", classProperty.getDefaultValue());

    if (classProperty.getType().equals("int")) {
      SPropertyOperations.set(myClassProperty, "type", SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "ClassPropertyDatatype"), "\u0426\u0435\u043b\u043e\u0435")));
    }

    if (classProperty.getType().equals("string")) {
      SPropertyOperations.set(myClassProperty, "type", SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "ClassPropertyDatatype"), "\u0421\u0442\u0440\u043e\u043a\u0430")));
    }

    if (classProperty.getType().equals("boolean")) {
      SPropertyOperations.set(myClassProperty, "type", SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "ClassPropertyDatatype"), "\u0411\u0443\u043b\u0435\u0432\u043e")));
    }

    if (classProperty.getType().equals("float")) {
      SPropertyOperations.set(myClassProperty, "type", SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:73355133-3b63-4ae4-8b45-1fe6e5a414f0(diglex.dsl.structure)", "ClassPropertyDatatype"), "\u0412\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435")));
    }

    return myClassProperty;
  }

  static {
  }
}
