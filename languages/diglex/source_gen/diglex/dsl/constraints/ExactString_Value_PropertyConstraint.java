package diglex.dsl.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import jetbrains.mps.smodel.constraints.INodePropertyValidator;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import diglex.dsl.utils.ExactStringBuilder;

public class ExactString_Value_PropertyConstraint implements IModelConstraints, INodePropertySetter, INodePropertyValidator {
  public ExactString_Value_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertySetter("diglex.dsl.structure.ExactString", "Value", this);
    manager.registerNodePropertyValidator("diglex.dsl.structure.ExactString", "Value", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertySetter("diglex.dsl.structure.ExactString", "Value");
    manager.unRegisterNodePropertyValidator("diglex.dsl.structure.ExactString", "Value");
  }

  public void execPropertySet(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    SNode parent = SNodeOperations.as(SNodeOperations.getParent(node), "diglex.dsl.structure.Block");

    if (StringUtils.isNotEmpty((SPropertyOperations.getString(propertyValue))) && (SLinkOperations.getTarget(parent, "lexemType", false) == null)) {
      SNode lexemType = ExactStringBuilder.GetLexemType((SPropertyOperations.getString(propertyValue)).charAt(0), SNodeOperations.getModel(node), scope);
      SLinkOperations.setTarget(parent, "lexemType", lexemType, false);
      SLinkOperations.setTarget(node, "lexemType", lexemType, false);
    }

    SPropertyOperations.set(node, "Value", (SPropertyOperations.getString(propertyValue)));

  }

  public boolean checkPropertyValue(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    if (SLinkOperations.getTarget(node, "lexemType", false) == null || (SPropertyOperations.getString(propertyValue)) == null || (SPropertyOperations.getString(propertyValue)).length() == 0) {
      return true;
    }

    return ExactStringBuilder.CheckExactString((SPropertyOperations.getString(propertyValue)), SLinkOperations.getTarget(node, "lexemType", false), scope);
  }
}
