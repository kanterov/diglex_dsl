package diglex.dsl.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.CanBeAChildContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class LexemType_Constraints {
  public static boolean canBeAChild(final IOperationContext operationContext, final CanBeAChildContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getParentNode(), "diglex.dsl.structure.LexemClassification")) {
      SNode lexemClassification = SNodeOperations.as(_context.getParentNode(), "diglex.dsl.structure.LexemClassification");
      boolean hasDefault = false;

      for (SNode lexemType : ListSequence.fromList(SLinkOperations.getTargets(lexemClassification, "lexemType", true))) {
        if (SPropertyOperations.getBoolean(lexemType, "default") && hasDefault) {
          return false;
        }

        if (SPropertyOperations.getBoolean(lexemType, "default")) {
          hasDefault = true;
        }
      }
    }

    return true;
  }
}
