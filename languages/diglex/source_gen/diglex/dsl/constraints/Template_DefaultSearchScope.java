package diglex.dsl.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import diglex.dsl.utils.CheckDependencies;
import jetbrains.mps.smodel.SNodePointer;

public class Template_DefaultSearchScope extends BaseNodeReferenceSearchScopeProvider {
  public Template_DefaultSearchScope() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeDefaultSearchScopeProvider("diglex.dsl.structure.Template", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeDefaultSearchScopeProvider("diglex.dsl.structure.Template");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    SNode template = SNodeOperations.getAncestor(_context.getEnclosingNode(), "diglex.dsl.structure.Template", false, false);
    Set<SNode> templates = SetSequence.fromSetWithValues(new HashSet<SNode>(), SModelOperations.getNodes(_context.getModel(), "diglex.dsl.structure.Template"));
    return CheckDependencies.GetNotConnectedTemplates(templates, template);
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:2f353a23-6f0c-4b49-9a1f-81779dd48e42(diglex.dsl.constraints)", "5809897118725498079");
  }
}
