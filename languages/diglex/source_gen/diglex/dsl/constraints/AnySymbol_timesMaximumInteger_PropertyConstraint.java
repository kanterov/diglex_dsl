package diglex.dsl.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class AnySymbol_timesMaximumInteger_PropertyConstraint implements IModelConstraints, INodePropertyGetter, INodePropertySetter {
  public AnySymbol_timesMaximumInteger_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("diglex.dsl.structure.AnySymbol", "timesMaximumInteger", this);
    manager.registerNodePropertySetter("diglex.dsl.structure.AnySymbol", "timesMaximumInteger", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("diglex.dsl.structure.AnySymbol", "timesMaximumInteger");
    manager.unRegisterNodePropertySetter("diglex.dsl.structure.AnySymbol", "timesMaximumInteger");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    if (SPropertyOperations.getString(node, "timesMaximum").equals("INF")) {
      return 2000000000;
    }
    return Integer.valueOf(SPropertyOperations.getString(node, "timesMaximum"));
  }

  public void execPropertySet(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
  }
}
