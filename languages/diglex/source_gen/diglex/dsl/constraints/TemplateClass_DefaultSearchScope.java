package diglex.dsl.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.constraints.ProviderGeneratedSearchScope;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SNodePointer;

public class TemplateClass_DefaultSearchScope extends BaseNodeReferenceSearchScopeProvider {
  public TemplateClass_DefaultSearchScope() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeDefaultSearchScopeProvider("diglex.dsl.structure.TemplateClass", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeDefaultSearchScopeProvider("diglex.dsl.structure.TemplateClass");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getReferenceNode(), "diglex.dsl.structure.TemplateClass")) {
      SNode templateClass = SNodeOperations.as(_context.getReferenceNode(), "diglex.dsl.structure.TemplateClass");
      if (SPropertyOperations.getBoolean(templateClass, "base")) {
        return Sequence.fromIterable(Collections.<SNode>emptyList());
      }
    }

    return SModelOperations.getRoots(_context.getModel(), "diglex.dsl.structure.TemplateClass");
  }

  public ISearchScope createNodeReferentSearchScope(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    return new ProviderGeneratedSearchScope(this, operationContext, _context) {
      public boolean isInScope(SNode checkedNode) {
        if (SNodeOperations.isInstanceOf(_context.getReferenceNode(), "diglex.dsl.structure.TemplateClass")) {
          // check there is no cyclic dependency 
          final Wrappers._T<Set<SNode>> dependentClasses = new Wrappers._T<Set<SNode>>(SetSequence.fromSet(new HashSet<SNode>()));
          SetSequence.fromSet(dependentClasses.value).addElement(_context.getReferenceNode());

          int size = SetSequence.fromSet(dependentClasses.value).count();

          while (true) {
            dependentClasses.value = SetSequence.fromSetWithValues(new HashSet<SNode>(), ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "diglex.dsl.structure.TemplateClass")).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SetSequence.fromSet(dependentClasses.value).contains(SLinkOperations.getTarget(it, "parentClass", false));
              }
            }));

            if (SetSequence.fromSet(dependentClasses.value).count() == size) {
              break;
            } else {
              size = SetSequence.fromSet(dependentClasses.value).count();
            }
          }

          if (SetSequence.fromSet(dependentClasses.value).contains(checkedNode)) {
            return false;
          }

          // Check there is no type overriding 
          final Map<String, String> propertyTypes = MapSequence.fromMap(new HashMap<String, String>());
          List<SNode> parents = ListSequence.fromList(new LinkedList<SNode>());

          if (SNodeOperations.isInstanceOf(_context.getReferenceNode(), "diglex.dsl.structure.TemplateClass")) {
            ListSequence.fromList(parents).addElement(_context.getReferenceNode());
          }

          SNode currentNode = checkedNode;
          final Wrappers._boolean correct = new Wrappers._boolean(true);

          while ((currentNode != null)) {
            ListSequence.fromList(parents).addElement(currentNode);
            currentNode = SLinkOperations.getTarget(currentNode, "parentClass", false);
          }

          ListSequence.fromList(parents).translate(new ITranslator2<SNode, SNode>() {
            public Iterable<SNode> translate(SNode it) {
              return SLinkOperations.getTargets(it, "templateClassProperty", true);
            }
          }).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              if (MapSequence.fromMap(propertyTypes).containsKey(SPropertyOperations.getString(it, "name"))) {
                if (MapSequence.fromMap(propertyTypes).get(SPropertyOperations.getString(it, "name")).equals(SPropertyOperations.getString_def(it, "type", "string")) == false) {
                  correct.value = false;
                }
              } else {
                MapSequence.fromMap(propertyTypes).put(SPropertyOperations.getString(it, "name"), SPropertyOperations.getString_def(it, "type", "string"));
              }
            }
          });

          if (!(correct.value)) {
            return false;
          }

          return true;
        }

        return true;
      }
    };
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:2f353a23-6f0c-4b49-9a1f-81779dd48e42(diglex.dsl.constraints)", "8627407948872561307");
  }
}
