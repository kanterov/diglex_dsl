package diglex.dsl.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodeReferentSetEventHandler;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class Template_templateClass_ReferentConstraint implements IModelConstraints, INodeReferentSetEventHandler {
  public Template_templateClass_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSetEventHandler("diglex.dsl.structure.Template", "templateClass", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSetEventHandler("diglex.dsl.structure.Template", "templateClass");
  }

  public void processReferentSetEvent(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode, IScope scope) {
    ListSequence.fromList(SLinkOperations.getTargets(referenceNode, "classProperty", true)).clear();

    List<SNode> parents = ListSequence.fromList(new LinkedList<SNode>());
    SNode currentNode = newReferentNode;

    while ((currentNode != null)) {
      ListSequence.fromList(parents).addElement(currentNode);
      currentNode = SLinkOperations.getTarget(currentNode, "parentClass", false);
    }

    final Set<String> includedProperties = SetSequence.fromSet(new HashSet<String>());

    // include all parent's properties default values 
    ListSequence.fromList(parents).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "templateClassProperty", true);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (!(SetSequence.fromSet(includedProperties).contains(SPropertyOperations.getString(it, "name")))) {
          SNode classProperty = SConceptOperations.createNewNode("diglex.dsl.structure.ClassProperty", null);
          SPropertyOperations.set(classProperty, "name", SPropertyOperations.getString(it, "name"));
          SPropertyOperations.set(classProperty, "value", SPropertyOperations.getString(it, "value"));

          ListSequence.fromList(SLinkOperations.getTargets(referenceNode, "classProperty", true)).addElement(classProperty);
          SetSequence.fromSet(includedProperties).addElement(SPropertyOperations.getString(it, "name"));
        }
      }
    });
  }
}
