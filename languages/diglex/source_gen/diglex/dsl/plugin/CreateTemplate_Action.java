package diglex.dsl.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.plugins.MacrosUtil;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SModel;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class CreateTemplate_Action extends GeneratedAction {
  private static final Icon ICON = IconManager.loadIcon(MacrosUtil.expandPath("/home/ripper/git/diglex_dsl/icons/blueprint--plus.png", "diglex.dsl"), true);
  private static Logger LOG = Logger.getLogger(CreateTemplate_Action.class);

  private SModel model;
  private Project project;
  private IOperationContext operationContext;

  public CreateTemplate_Action() {
    super("\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0448\u0430\u0431\u043b\u043e\u043d", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "CreateTemplate", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    if (event.getData(MPSDataKeys.CONTEXT_MODEL) == null) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.CONTEXT_MODEL).getSModel();
    if (this.model == null) {
      return false;
    }
    this.project = event.getData(MPSDataKeys.PROJECT);
    if (this.project == null) {
      return false;
    }
    this.operationContext = event.getData(MPSDataKeys.OPERATION_CONTEXT);
    if (this.operationContext == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.model = null;
    this.project = null;
    this.operationContext = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      SNode template = SConceptOperations.createNewNode("diglex.dsl.structure.Template", null);
      SModelOperations.addRootNode(CreateTemplate_Action.this.model, template);

      SelectTemplateTool selectTemplateTool = new SelectTemplateTool(CreateTemplate_Action.this.project, CreateTemplate_Action.this.operationContext);
      boolean result = selectTemplateTool.selectTemplate(template);
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "CreateTemplate", t);
    }
  }
}
