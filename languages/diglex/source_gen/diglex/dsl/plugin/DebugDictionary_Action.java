package diglex.dsl.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelDescriptor;
import java.awt.Component;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import diglex.dsl.structure.Dictionary;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class DebugDictionary_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(DebugDictionary_Action.class);

  private SModel model;
  private SModelDescriptor modelDescriptor;
  private Component component;

  public DebugDictionary_Action() {
    super("\u041e\u0442\u043b\u0430\u0434\u043a\u0430 \u0421\u043b\u043e\u0432\u0430\u0440\u044f", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @NotNull
  public String getKeyStroke() {
    return "";
  }

  public void doUpdate(@NotNull AnActionEvent event) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "DebugDictionary", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event) {
    if (!(super.collectActionData(event))) {
      return false;
    }
    if (event.getData(MPSDataKeys.CONTEXT_MODEL) == null) {
      return false;
    }
    this.model = event.getData(MPSDataKeys.CONTEXT_MODEL).getSModel();
    if (this.model == null) {
      return false;
    }
    this.modelDescriptor = event.getData(MPSDataKeys.CONTEXT_MODEL);
    if (this.modelDescriptor == null) {
      return false;
    }
    this.component = event.getData(MPSDataKeys.CONTEXT_COMPONENT);
    if (this.component == null) {
      return false;
    }
    return true;
  }

  protected void cleanup() {
    super.cleanup();
    this.model = null;
    this.modelDescriptor = null;
    this.component = null;
  }

  public void doExecute(@NotNull final AnActionEvent event) {
    try {
      SNode dictionary = null;
      String fileSeparator = System.getProperty("file.separator");

      // Select by default 
      if (ListSequence.fromList(SModelOperations.getRoots(DebugDictionary_Action.this.model, "diglex.dsl.structure.Dictionary")).count() == 1) {
        dictionary = ListSequence.fromList(SModelOperations.getRoots(DebugDictionary_Action.this.model, "diglex.dsl.structure.Dictionary")).getElement(0);
      } else {
        dictionary = DebugDictionary_Action.this.selectNode();
      }

      if ((dictionary != null) && dictionary != null) {
        String outputPath = DebugDictionary_Action.this.modelDescriptor.getModule().getOutputFor(DebugDictionary_Action.this.modelDescriptor);
        String xmlPath = DebugDictionary_Action.this.modelDescriptor.getLongName().replace(".", fileSeparator) + fileSeparator + (SPropertyOperations.getString(dictionary, "name").toString()) + ".xml";

        String xmlFullPath = outputPath + fileSeparator + xmlPath;

        LOG.info("Selected Dictionary " + SPropertyOperations.getString(dictionary, "name"));
        LOG.info("xml full path: " + xmlFullPath);

        ITemplateReader templateReader = new TemplateReader(((Dictionary) SNodeOperations.getAdapter(dictionary)));
        ISearchResultsProvider searchResultsProvider = new SearchResultsProvider(xmlFullPath);

        // here is id giving. TODO: get it to external utility 
        final Wrappers._int id = new Wrappers._int(0);

        ListSequence.fromList(SModelOperations.getRoots(DebugDictionary_Action.this.model, "diglex.dsl.structure.Template")).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            SPropertyOperations.set(it, "id1", "" + id.value);
            id.value++;
          }
        });

        TemplateDebugDialog templateDialog = new TemplateDebugDialog(templateReader, searchResultsProvider, SPropertyOperations.getString(dictionary, "name"));
        templateDialog.setSize(800, 600);
        templateDialog.setVisible(true);
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "DebugDictionary", t);
    }
  }

  private SNode selectNode() {

    try {
      DictionarySelectionDialog dialog = null;

      dialog = new DictionarySelectionDialog(DebugDictionary_Action.this.model);

      dialog.pack();
      dialog.setLocationRelativeTo(DebugDictionary_Action.this.component);
      dialog.setVisible(true);

      return SNodeOperations.as(dialog.getSelectedDictionaryNode(), "diglex.dsl.structure.Dictionary");
    } catch (Exception e) {
      LOG.error("\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0430", e.getMessage());
      LOG.error(e.getMessage() + "", e);

      for (StackTraceElement element : e.getStackTrace()) {
        LOG.error(element.toString(), e);
      }
    }

    return null;
  }
}
