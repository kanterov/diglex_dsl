package diglex.dsl.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import diglex.dsl.utils.IdUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import diglex.dsl.utils.CheckDependencies;
import jetbrains.mps.smodel.SModelUtil_new;

public class CheckDictionaryConsistency_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public CheckDictionaryConsistency_NonTypesystemRule() {
  }

  public void applyRule(final SNode dictionary, final TypeCheckingContext typeCheckingContext) {
    final List<Integer> ids = ListSequence.fromList(new LinkedList<Integer>());
    Set<Integer> dictionaryIds = SetSequence.fromSet(new HashSet<Integer>());

    IdUtil.GiveIds(SNodeOperations.getModel(dictionary));

    ListSequence.fromList(SLinkOperations.getTargets(dictionary, "dictionaryTemplate", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "template", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "template", false);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode template) {

        CheckDependencies.AddTemplateDependencyIds(template, ids);
      }
    });
  }

  public String getApplicableConceptFQName() {
    return "diglex.dsl.structure.Dictionary";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
