package diglex.dsl.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import java.util.List;
import diglex.dsl.utils.CheckDependencies;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import diglex.dsl.structure.Template;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.nodeEditor.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class CheckDictionaryConsistency_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public CheckDictionaryConsistency_NonTypesystemRule() {
  }

  public void applyRule(final SNode dictionary, final TypeCheckingContext typeCheckingContext) {
    List<String> missingIds = CheckDependencies.GetDictionaryMissingDependencyIds(dictionary);

    if (ListSequence.fromList(missingIds).isNotEmpty()) {
      for (final String missingId : missingIds) {
        ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(dictionary), "diglex.dsl.structure.Template")).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {

            if (((Template) SNodeOperations.getAdapter(it)).getId().equals(missingId)) {
              {
                BaseIntentionProvider intentionProvider = null;
                IErrorTarget errorTarget = new NodeErrorTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(dictionary, "\u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 " + SPropertyOperations.getString(it, "name") + ", \u043d\u043e \u043e\u043d \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0435\u043d", "r:f4b85e2c-2701-4120-894e-38d23b925d75(diglex.dsl.typesystem)", "1922820112741867256", intentionProvider, errorTarget);
              }
            }
          }
        });
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "diglex.dsl.structure.Dictionary";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
