package diglex.dsl.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MatchCase extends BaseConcept {
  public static final String concept = "diglex.dsl.structure.MatchCase";
  public static final String POSTCONDITION = "Postcondition";
  public static final String PRECONDITION = "Precondition";
  public static final String ITEMS = "Items";

  public MatchCase(SNode node) {
    super(node);
  }

  public MatchCaseCondition getPostcondition() {
    return (MatchCaseCondition) this.getChild(MatchCaseCondition.class, MatchCase.POSTCONDITION);
  }

  public void setPostcondition(MatchCaseCondition node) {
    super.setChild(MatchCase.POSTCONDITION, node);
  }

  public MatchCaseCondition getPrecondition() {
    return (MatchCaseCondition) this.getChild(MatchCaseCondition.class, MatchCase.PRECONDITION);
  }

  public void setPrecondition(MatchCaseCondition node) {
    super.setChild(MatchCase.PRECONDITION, node);
  }

  public int getItemsesCount() {
    return this.getChildCount(MatchCase.ITEMS);
  }

  public Iterator<IMatchCaseItem> Itemses() {
    return this.children(IMatchCaseItem.class, MatchCase.ITEMS);
  }

  public List<IMatchCaseItem> getItemses() {
    return this.getChildren(IMatchCaseItem.class, MatchCase.ITEMS);
  }

  public void addItems(IMatchCaseItem node) {
    this.addChild(MatchCase.ITEMS, node);
  }

  public void insertItems(IMatchCaseItem prev, IMatchCaseItem node) {
    this.insertChild(prev, MatchCase.ITEMS, node);
  }

  public static MatchCase newInstance(SModel sm, boolean init) {
    return (MatchCase) SModelUtil_new.instantiateConceptDeclaration("diglex.dsl.structure.MatchCase", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MatchCase newInstance(SModel sm) {
    return MatchCase.newInstance(sm, false);
  }
}
