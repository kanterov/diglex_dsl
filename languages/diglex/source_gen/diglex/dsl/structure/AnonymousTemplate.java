package diglex.dsl.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AnonymousTemplate extends BaseConcept implements IMatchCaseItem {
  public static final String concept = "diglex.dsl.structure.AnonymousTemplate";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String REPEAT = "Repeat";
  public static final String MATCH_CASE = "matchCase";

  public AnonymousTemplate(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(AnonymousTemplate.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AnonymousTemplate.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AnonymousTemplate.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AnonymousTemplate.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AnonymousTemplate.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AnonymousTemplate.VIRTUAL_PACKAGE, value);
  }

  public RepeatTimes getRepeat() {
    return (RepeatTimes) this.getChild(RepeatTimes.class, AnonymousTemplate.REPEAT);
  }

  public void setRepeat(RepeatTimes node) {
    super.setChild(AnonymousTemplate.REPEAT, node);
  }

  public int getMatchCasesCount() {
    return this.getChildCount(AnonymousTemplate.MATCH_CASE);
  }

  public Iterator<MatchCase> matchCases() {
    return this.children(MatchCase.class, AnonymousTemplate.MATCH_CASE);
  }

  public List<MatchCase> getMatchCases() {
    return this.getChildren(MatchCase.class, AnonymousTemplate.MATCH_CASE);
  }

  public void addMatchCase(MatchCase node) {
    this.addChild(AnonymousTemplate.MATCH_CASE, node);
  }

  public void insertMatchCase(MatchCase prev, MatchCase node) {
    this.insertChild(prev, AnonymousTemplate.MATCH_CASE, node);
  }

  public static AnonymousTemplate newInstance(SModel sm, boolean init) {
    return (AnonymousTemplate) SModelUtil_new.instantiateConceptDeclaration("diglex.dsl.structure.AnonymousTemplate", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AnonymousTemplate newInstance(SModel sm) {
    return AnonymousTemplate.newInstance(sm, false);
  }
}
