package diglex.dsl.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DistantContextCondition extends BaseConcept {
  public static final String concept = "diglex.dsl.structure.DistantContextCondition";
  public static final String NOT_INCLUDE = "NotInclude";
  public static final String TEMPLATE_REFERENCE = "TemplateReference";

  public DistantContextCondition(SNode node) {
    super(node);
  }

  public boolean getNotInclude() {
    return this.getBooleanProperty(DistantContextCondition.NOT_INCLUDE);
  }

  public void setNotInclude(boolean value) {
    this.setBooleanProperty(DistantContextCondition.NOT_INCLUDE, value);
  }

  public Template getTemplateReference() {
    return (Template) this.getReferent(Template.class, DistantContextCondition.TEMPLATE_REFERENCE);
  }

  public void setTemplateReference(Template node) {
    super.setReferent(DistantContextCondition.TEMPLATE_REFERENCE, node);
  }

  public static DistantContextCondition newInstance(SModel sm, boolean init) {
    return (DistantContextCondition) SModelUtil_new.instantiateConceptDeclaration("diglex.dsl.structure.DistantContextCondition", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DistantContextCondition newInstance(SModel sm) {
    return DistantContextCondition.newInstance(sm, false);
  }
}
