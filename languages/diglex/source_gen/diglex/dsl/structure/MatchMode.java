package diglex.dsl.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum MatchMode {
  Абсолютно_значимый("\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439", "AbsoluteMeaningful"),
  Самостоятельно_незначимый("\u0421\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439", "RelativeMeaningful"),
  Незначимый("\u041d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439", "NotMeaningful");

  private String myName;
  private String myValue;

  MatchMode(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public String getValue() {
    return this.myValue;
  }

  public static List<MatchMode> getConstants() {
    List<MatchMode> list = ListSequence.fromList(new LinkedList<MatchMode>());
    ListSequence.fromList(list).addElement(MatchMode.Абсолютно_значимый);
    ListSequence.fromList(list).addElement(MatchMode.Самостоятельно_незначимый);
    ListSequence.fromList(list).addElement(MatchMode.Незначимый);
    return list;
  }

  public static MatchMode getDefault() {
    return MatchMode.Абсолютно_значимый;
  }

  public static MatchMode parseValue(String value) {
    if (value == null) {
      return MatchMode.getDefault();
    }
    if (value.equals(MatchMode.Абсолютно_значимый.getValueAsString())) {
      return MatchMode.Абсолютно_значимый;
    }
    if (value.equals(MatchMode.Самостоятельно_незначимый.getValueAsString())) {
      return MatchMode.Самостоятельно_незначимый;
    }
    if (value.equals(MatchMode.Незначимый.getValueAsString())) {
      return MatchMode.Незначимый;
    }
    return MatchMode.getDefault();
  }
}
