package diglex.dsl.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DistantContext extends BaseConcept implements IMatchCaseItem {
  public static final String concept = "diglex.dsl.structure.DistantContext";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String REPEAT = "Repeat";
  public static final String CONDITIONS = "Conditions";

  public DistantContext(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(DistantContext.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DistantContext.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DistantContext.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DistantContext.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DistantContext.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DistantContext.VIRTUAL_PACKAGE, value);
  }

  public RepeatTimes getRepeat() {
    return (RepeatTimes) this.getChild(RepeatTimes.class, DistantContext.REPEAT);
  }

  public void setRepeat(RepeatTimes node) {
    super.setChild(DistantContext.REPEAT, node);
  }

  public int getConditionsesCount() {
    return this.getChildCount(DistantContext.CONDITIONS);
  }

  public Iterator<DistantContextCondition> Conditionses() {
    return this.children(DistantContextCondition.class, DistantContext.CONDITIONS);
  }

  public List<DistantContextCondition> getConditionses() {
    return this.getChildren(DistantContextCondition.class, DistantContext.CONDITIONS);
  }

  public void addConditions(DistantContextCondition node) {
    this.addChild(DistantContext.CONDITIONS, node);
  }

  public void insertConditions(DistantContextCondition prev, DistantContextCondition node) {
    this.insertChild(prev, DistantContext.CONDITIONS, node);
  }

  public static DistantContext newInstance(SModel sm, boolean init) {
    return (DistantContext) SModelUtil_new.instantiateConceptDeclaration("diglex.dsl.structure.DistantContext", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DistantContext newInstance(SModel sm) {
    return DistantContext.newInstance(sm, false);
  }
}
