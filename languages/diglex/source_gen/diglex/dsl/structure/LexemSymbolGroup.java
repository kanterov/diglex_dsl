package diglex.dsl.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LexemSymbolGroup extends BaseConcept {
  public static final String concept = "diglex.dsl.structure.LexemSymbolGroup";
  public static final String SYMBOL = "symbol";

  public LexemSymbolGroup(SNode node) {
    super(node);
  }

  public int getSymbolsCount() {
    return this.getChildCount(LexemSymbolGroup.SYMBOL);
  }

  public Iterator<ILexemSymbol> symbols() {
    return this.children(ILexemSymbol.class, LexemSymbolGroup.SYMBOL);
  }

  public List<ILexemSymbol> getSymbols() {
    return this.getChildren(ILexemSymbol.class, LexemSymbolGroup.SYMBOL);
  }

  public void addSymbol(ILexemSymbol node) {
    this.addChild(LexemSymbolGroup.SYMBOL, node);
  }

  public void insertSymbol(ILexemSymbol prev, ILexemSymbol node) {
    this.insertChild(prev, LexemSymbolGroup.SYMBOL, node);
  }

  public static LexemSymbolGroup newInstance(SModel sm, boolean init) {
    return (LexemSymbolGroup) SModelUtil_new.instantiateConceptDeclaration("diglex.dsl.structure.LexemSymbolGroup", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LexemSymbolGroup newInstance(SModel sm) {
    return LexemSymbolGroup.newInstance(sm, false);
  }
}
