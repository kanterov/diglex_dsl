package diglex.dsl.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LexemType extends BaseConcept implements INamedConcept {
  public static final String concept = "diglex.dsl.structure.LexemType";
  public static final String BULK = "bulk";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String DEFAULT = "default";
  public static final String SYMBOL_GROUP = "symbolGroup";

  public LexemType(SNode node) {
    super(node);
  }

  public String getBulk() {
    return this.getProperty(LexemType.BULK);
  }

  public void setBulk(String value) {
    this.setProperty(LexemType.BULK, value);
  }

  public String getName() {
    return this.getProperty(LexemType.NAME);
  }

  public void setName(String value) {
    this.setProperty(LexemType.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(LexemType.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(LexemType.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(LexemType.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(LexemType.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(LexemType.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(LexemType.VIRTUAL_PACKAGE, value);
  }

  public boolean getDefault() {
    return this.getBooleanProperty(LexemType.DEFAULT);
  }

  public void setDefault(boolean value) {
    this.setBooleanProperty(LexemType.DEFAULT, value);
  }

  public int getSymbolGroupsCount() {
    return this.getChildCount(LexemType.SYMBOL_GROUP);
  }

  public Iterator<LexemSymbolGroup> symbolGroups() {
    return this.children(LexemSymbolGroup.class, LexemType.SYMBOL_GROUP);
  }

  public List<LexemSymbolGroup> getSymbolGroups() {
    return this.getChildren(LexemSymbolGroup.class, LexemType.SYMBOL_GROUP);
  }

  public void addSymbolGroup(LexemSymbolGroup node) {
    this.addChild(LexemType.SYMBOL_GROUP, node);
  }

  public void insertSymbolGroup(LexemSymbolGroup prev, LexemSymbolGroup node) {
    this.insertChild(prev, LexemType.SYMBOL_GROUP, node);
  }

  public static LexemType newInstance(SModel sm, boolean init) {
    return (LexemType) SModelUtil_new.instantiateConceptDeclaration("diglex.dsl.structure.LexemType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LexemType newInstance(SModel sm) {
    return LexemType.newInstance(sm, false);
  }
}
